import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef } from 'react';
import { Card as CardComponent } from './Card';
import { canPlayFromFaceUpCards, canPlayFromFaceDownCards } from '../utils/deck';
export function PlayerSection({ player, isCurrentPlayer, onCardClick, selectedCards, pileTopCard, gamePhase, isThreeActive, cardBackColor = 'blue' }) {
    const scrollContainerRef = useRef(null);
    const canPlayFaceUp = canPlayFromFaceUpCards(player);
    const canPlayFaceDown = canPlayFromFaceDownCards(player);
    // For computer player, only show minimal information
    if (player.isComputer) {
        return (_jsxs("div", { className: "bg-white/90 rounded-lg p-4 shadow-lg w-full max-w-3xl mx-auto", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("h3", { className: "text-lg font-bold", children: player.name }), _jsxs("div", { className: "flex items-center gap-4", children: [isCurrentPlayer && (_jsx("div", { className: "text-sm text-gray-600 animate-pulse", children: "Computer is thinking..." })), _jsxs("div", { className: "text-sm text-gray-600", children: ["Cards in hand: ", player.hand.length] })] })] }), _jsx("div", { className: "flex justify-center gap-8 mt-4", children: [0, 1, 2].map((index) => (_jsxs("div", { className: "relative w-24", children: [player.faceDownCards[index] && (_jsx("div", { className: "absolute top-0 left-0", children: _jsx(CardComponent, { faceDown: true, cardBackColor: cardBackColor }) })), player.faceUpCards[index] && (_jsx("div", { className: "relative", children: _jsx(CardComponent, { card: player.faceUpCards[index], isPlayable: false }) }))] }, index))) }), player.hand.length > 0 && (_jsx("div", { className: "flex justify-center mt-4", children: _jsxs("div", { className: "relative", children: [_jsx(CardComponent, { faceDown: true, cardBackColor: cardBackColor }), _jsx("span", { className: "absolute -top-2 -right-2 bg-white rounded-full px-2 py-1 text-xs font-medium", children: player.hand.length })] }) }))] }));
    }
    // For non-current players (except during card selection), show nothing
    if (!isCurrentPlayer && gamePhase !== 'selectingCards') {
        return null;
    }
    return (_jsxs("div", { className: "bg-white/90 rounded-lg p-6 shadow-lg w-full max-w-3xl mx-auto", children: [_jsxs("div", { className: "flex justify-between items-center mb-4", children: [_jsx("h3", { className: "text-lg font-bold", children: player.name }), _jsxs("span", { className: "text-sm text-gray-600", children: ["Cards in hand: ", player.hand.length] })] }), _jsxs("div", { className: "space-y-8", children: [_jsx("div", { className: "flex justify-center gap-8", children: [0, 1, 2].map((index) => (_jsxs("div", { className: "relative w-24", children: [_jsx("div", { className: "absolute top-0 left-0", children: player.faceDownCards[index] && (_jsx(CardComponent, { faceDown: true, onClick: () => canPlayFaceDown && isCurrentPlayer && onCardClick?.(player.faceDownCards[index], 'faceDown'), selected: selectedCards.some(c => c.id === player.faceDownCards[index]?.id), isPlayable: canPlayFaceDown && isCurrentPlayer && gamePhase === 'playing', cardBackColor: cardBackColor })) }), _jsx("div", { className: "relative", children: player.faceUpCards[index] && (_jsx(CardComponent, { card: player.faceUpCards[index], onClick: () => canPlayFaceUp && isCurrentPlayer && onCardClick?.(player.faceUpCards[index], 'faceUp'), selected: selectedCards.some(c => c.id === player.faceUpCards[index]?.id), isPlayable: canPlayFaceUp && isCurrentPlayer && gamePhase === 'playing', pileTopCard: pileTopCard })) })] }, index))) }), (isCurrentPlayer || gamePhase === 'selectingCards') && (_jsx("div", { className: "flex justify-center flex-wrap gap-4", children: player.hand.map((card) => (_jsx("div", { className: "w-24 flex-shrink-0", children: _jsx(CardComponent, { card: card, onClick: () => !canPlayFaceDown && !canPlayFaceUp && onCardClick?.(card, 'hand'), selected: selectedCards.some(c => c.id === card.id), isPlayable: !canPlayFaceDown && !canPlayFaceUp && gamePhase === 'playing', pileTopCard: pileTopCard }) }, card.id))) }))] })] }));
}
